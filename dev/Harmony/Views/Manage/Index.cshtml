@model Harmony.Models.IndexViewModel
@using CalendarData = Google.Apis.Calendar.v3.Data;

@section head{
    <link rel="stylesheet" href="~/Content/theme3.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
}

@{
    ViewBag.Title = "Manage";
}

<!-- Social media icons -->
<style>
    i {
        padding-right: 8px;
    }
</style>

<p class="text-success">@ViewBag.StatusMessage</p>
<div class="container black-font">
    <h4 style="color:seashell;font-family: Broadway; font-size: 30px">My Profile</h4>
    <div class="container" id="myprofile">
        <div class="row">
            <div class="col-md-3">
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.FirstName)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.FirstName)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.LastName)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.LastName)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.City)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.City)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.State)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.State)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.Email)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Email)
                    </dd>
                    <dt>
                        @Html.DisplayNameFor(model => model.Description)
                    </dt>
                    <dd>
                        @Html.DisplayFor(model => model.Description)
                    </dd>
                    @if (User.IsInRole("Musician"))
                    {
                        <dt>
                            @Html.DisplayNameFor(model => model.MyGenres)
                        </dt>
                        <dd>
                            <dl>
                                @foreach (var item in Model.MyGenres)
                                {
                                    <dd>@Html.DisplayFor(model => item.GenreName)</dd>
                                }
                            </dl>
                        </dd>
                    }
                    @if (User.IsInRole("VenueOwner"))
                    {
                        <dt>
                            @Html.DisplayNameFor(model => model.MyVenues)
                        </dt>
                        <dd>
                            @foreach (var item in Model.MyVenues)
                            {
                                <dl class="dl-horizontal">
                                    <dt>
                                        @Html.ActionLink(item.VenueName, "Details", "Venues", new { id = item.ID }, null)
                                    </dt>
                                </dl>
                            }
                        </dd>
                    }


                    <dd>@Html.ActionLink("View Shows", "MyShows", "Shows")</dd>
                </dl>

            </div>

            <div class="col-md-5">
                <div>
                    <img src="@ViewBag.ProfilePath">
                </div>
            </div>

            <div class="col-md-2 offset-1">
                <h5>Social Media</h5>
                <a href="https://www.facebook.com/@Model.Facebook" style="color: black"><i class="fa fa-facebook" aria-hidden="true"></i></a>
                <a href="https://www.instagram.com/@Model.Instagram" style="color: black"><i class="fa fa-instagram" aria-hidden="true"></i></a>
                <a href="https://www.twitter.com/@Model.Twitter" style="color: black"><i class="fa fa-twitter" aria-hidden="true"></i></a>
                @if (User.IsInRole("Musician"))
                {
                    <a href="https://www.spotify.com/@Model.Spotify" style="color: black"><i class="fa fa-spotify" aria-hidden="true"></i></a>
                    <a href="https://www.apple.com/applemusic/" style="color: black"><i class="fa fa-apple" aria-hidden="true"></i></a>
                    <a href="https://www.youtube.com/" style="color: black"><i class="fa fa-youtube" aria-hidden="true"></i></a>
                }
                <br />
                @Html.ActionLink("Update Social Media", "EditSocialMedia")
            </div>
        </div>
        <div class="row">
            <div class="text-md-left">
                <div class="col-md-12">
                    <h4>Change your account settings</h4>
                    <hr />
                    <dl class="dl-horizontal">
                        <dt>Password:</dt>
                        <dd>
                            [
                            @if (Model.HasPassword)
                            {
                                @Html.ActionLink("Change your password", "ChangePassword")
                            }
                            else
                            {
                                @Html.ActionLink("Create", "SetPassword")
                            }
                            ]
                        </dd>
                        <dt>External Logins:</dt>
                        <dd>
                            @Model.Logins.Count [
                            @Html.ActionLink("Manage", "ManageLogins") ]
                        </dd>
                        @*
                            Phone Numbers can used as a second factor of verification in a two-factor authentication system.

                                See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
                                for details on setting up this ASP.NET application to support two-factor authentication using SMS.

                                Uncomment the following block after you have set up two-factor authentication
                        *@
                        @*
                            <dt>Phone Number:</dt>
                            <dd>
                                @(Model.PhoneNumber ?? "None")
                                @if (Model.PhoneNumber != null)
                                {
                                    <br />
                                    <text>[&nbsp;&nbsp;@Html.ActionLink("Change", "AddPhoneNumber")&nbsp;&nbsp;]</text>
                                    using (Html.BeginForm("RemovePhoneNumber", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <text>[<input type="submit" value="Remove" class="btn-link" />]</text>
                                    }
                                }
                                else
                                {
                                    <text>[&nbsp;&nbsp;@Html.ActionLink("Add", "AddPhoneNumber")
                                }
                            </dd>
                        *@
                        <dt>Two-Factor Authentication:</dt>
                        <dd>
                            <p>
                                There are no two-factor authentication providers configured. See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
                                for details on setting up this ASP.NET application to support two-factor authentication.
                            </p>
                            @*@if (Model.TwoFactor)
                                {
                                    using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <text>Enabled
                                        <input type="submit" value="Disable" class="btn btn-link" />
                                        </text>
                                    }
                                }
                                else
                                {
                                    using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <text>Disabled
                                        <input type="submit" value="Enable" class="btn btn-link" />
                                        </text>
                                    }
                                }*@
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h5>Availability</h5>
                <div id="caleandar">

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/caleandar")
    <script>
        $.ajax({
            type: 'GET',
            datatype: 'json',
            url: '/api/events',
            success: getEvent,
            error: errorOnAjax
        });
        var events = [];

        function errorOnAjax() {
            console.log('Error on AJAX return');
        }

        function getEvent(data) {
            for (i = 0; i < data.length; i++) {
                events.push({
                    'Date': new Date(data[i].Year, (data[i].Month - 1), data[i].Day),
                    'Title': data[i].Title,
                    'Link': data[i].link
                    //"'Date': new Date(" + data[i].Year + ", " + (data[i].Month - 1) + ", " + data[i].Day + "), 'Title': '" + data[i].Title + "'"
                });
            }
        }
        
        var settings = {
            LinkColor: '#fd7e14',
            NavShow: true,                //(bool) show navigation arrows.
            NavVertical: false,           //(bool) show previous and coming months.
            NavLocation: '#foo',          //(string - element) where to display navigation, if not in default position.
            DateTimeShow: true,           //(bool) show current date.
            DateTimeFormat: 'mmm, yyyy',  //(string - dateformat) format previously mentioned date is shown in.
            DatetimeLocation: '',         //(string - element) where to display previously mentioned date, if not in default position.
            EventClick: '',     //(function) a function that should instantiate on the click of any event. parameters passed in via data link attribute.
            EventTargetWholeDay: false,   //(bool) clicking on the whole date will trigger event action, as opposed to just clicking on the title.
            DisabledDays: []       //(array of objects) new data object to pass into calendar (serving suggestion: passing through only the currently selected month's events if working with large dataset.
        };
        var element = document.getElementById('caleandar');
        caleandar(element, events, settings);
    </script>
}
